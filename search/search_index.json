{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selamat Datang di Halaman \u00b6 Komputasi Numerik \u00b6 Profil \u00b6 Nama: Triandani Umiyati NIM: 180411100008 Kelas: Komputasi Numerik 4A Program Studi: Teknik Informatika Dosen Pengampu: Mula'ab, S.Si, M.Kom","title":"Home"},{"location":"#selamat-datang-di-halaman","text":"","title":"Selamat Datang di Halaman"},{"location":"#komputasi-numerik","text":"","title":"Komputasi Numerik"},{"location":"#profil","text":"Nama: Triandani Umiyati NIM: 180411100008 Kelas: Komputasi Numerik 4A Program Studi: Teknik Informatika Dosen Pengampu: Mula'ab, S.Si, M.Kom","title":"Profil"},{"location":"tugas1/","text":"Menghitung nilai e^{2x}e^{2x} dengan Pendekatan Deret MacLaurin \u00b6 Deret Taylor \u00b6 Untuk setiap fungsi f(x) yang diferensiabel di titik a, maka ekspansi dari f(x) sebagai berikut . $$ f(x) = f(a) + \\frac{f'a}{1!}(x-a) + \\frac{f''a}{2!}(x-a)^{2} + \\frac{f'''a}{3!}(x-a)^{3} + ...... + \\frac{f^{n}a}{n!}(x-a)^{n} $$ dengan n ! melambangkan faktorial n dan f ( n )( a ) melambangkan nilai dari turunan ke- n dari f pada titik a . Turunan ke nol dari f didefinisikan sebagai f itu sendiri, dan ( x \u2212 a )^0 dan 0! didefinisikan sebagai 1. Deret MacLaurin \u00b6 Deret MacLaurin hampir sama dengan deret Taylor hanya saja pada deret MacLaurin nilai a=0, persamaannya adalah sebagai berikut. $$ f(x) = f(a) + \\frac{f'0}{1!}(x-0) + \\frac{f''0}{2!}(x-0)^{2} + \\frac{f'''0}{3!}(x-0)^{3} + ...... + \\frac{f^{n}0}{n!}(x-0)^{n} $$ atau dapat ditulis sebagai berikut. \\sum_{i=1}^{n}\\frac{f^{n}(0)}{n!}(x-0)^{n} \\sum_{i=1}^{n}\\frac{f^{n}(0)}{n!}(x-0)^{n} Implementasi \u00b6 import math error = 0.001 def percent ( angka ): return str ( round ( angka * 100 , 4 )) + '%' def f ( x ): f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) #\u03a3f(0)x^i / i! print ( 'f ke-' , i , '=' , f_turunan , ' {e^3x=' , current , '} {Ea=' , current - old , '} {|\u03f5a|%=' , ( current - old ) / current , '|' , percent (( current - old ) / current ), '}' ) if current - old < error : iteration = False else : f_turunan *= 3 i += 1 f ( 1 ) Output: f ke - 0 = 1 { e ^ 3 x = 1.0 } { Ea = 1.0 } { | \u03f5 a |%= 1.0 | 100.0 % } f ke - 1 = 3 { e ^ 3 x = 4.0 } { Ea = 3.0 } { | \u03f5 a |%= 0.75 | 75.0 % } f ke - 2 = 9 { e ^ 3 x = 8.5 } { Ea = 4.5 } { | \u03f5 a |%= 0.5294117647058824 | 52.9412 % } f ke - 3 = 27 { e ^ 3 x = 13.0 } { Ea = 4.5 } { | \u03f5 a |%= 0.34615384615384615 | 34.6154 % } f ke - 4 = 81 { e ^ 3 x = 16.375 } { Ea = 3.375 } { | \u03f5 a |%= 0.20610687022900764 | 20.6107 % } f ke - 5 = 243 { e ^ 3 x = 18.4 } { Ea = 2.0249999999999986 } { | \u03f5 a |%= 0.11005434782608689 | 11.0054 % } f ke - 6 = 729 { e ^ 3 x = 19.412499999999998 } { Ea = 1.0124999999999993 } { | \u03f5 a |%= 0.05215711526078554 | 5.2157 % } f ke - 7 = 2187 { e ^ 3 x = 19.846428571428568 } { Ea = 0.4339285714285701 } { | \u03f5 a |%= 0.02186431527802765 | 2.1864 % } f ke - 8 = 6561 { e ^ 3 x = 20.009151785714284 } { Ea = 0.162723214285716 } { | \u03f5 a |%= 0.008132439397150944 | 0.8132 % } f ke - 9 = 19683 { e ^ 3 x = 20.063392857142855 } { Ea = 0.05424107142857082 } { | \u03f5 a |%= 0.0027034844911218605 | 0.2703 % } f ke - 10 = 59049 { e ^ 3 x = 20.079665178571425 } { Ea = 0.016272321428569825 } { | \u03f5 a |%= 0.0008103880858499218 | 0.081 % } f ke - 11 = 177147 { e ^ 3 x = 20.08410308441558 } { Ea = 0.004437905844156376 } { | \u03f5 a |%= 0.00022096609569784593 | 0.0221 % } f ke - 12 = 531441 { e ^ 3 x = 20.08521256087662 } { Ea = 0.001109476461039094 } { | \u03f5 a |%= 5.523847246706314e-05 | 0.0055 % } f ke - 13 = 1594323 { e ^ 3 x = 20.08546859390609 } { Ea = 0.0002560330294691937 } { | \u03f5 a |%= 1.2747177307422833e-05 | 0.0013 % }","title":"MacLaurin"},{"location":"tugas1/#menghitung-nilai-e2xe2x-dengan-pendekatan-deret-maclaurin","text":"","title":"Menghitung nilai e^{2x}e^{2x} dengan Pendekatan Deret MacLaurin"},{"location":"tugas1/#deret-taylor","text":"Untuk setiap fungsi f(x) yang diferensiabel di titik a, maka ekspansi dari f(x) sebagai berikut . $$ f(x) = f(a) + \\frac{f'a}{1!}(x-a) + \\frac{f''a}{2!}(x-a)^{2} + \\frac{f'''a}{3!}(x-a)^{3} + ...... + \\frac{f^{n}a}{n!}(x-a)^{n} $$ dengan n ! melambangkan faktorial n dan f ( n )( a ) melambangkan nilai dari turunan ke- n dari f pada titik a . Turunan ke nol dari f didefinisikan sebagai f itu sendiri, dan ( x \u2212 a )^0 dan 0! didefinisikan sebagai 1.","title":"Deret Taylor"},{"location":"tugas1/#deret-maclaurin","text":"Deret MacLaurin hampir sama dengan deret Taylor hanya saja pada deret MacLaurin nilai a=0, persamaannya adalah sebagai berikut. $$ f(x) = f(a) + \\frac{f'0}{1!}(x-0) + \\frac{f''0}{2!}(x-0)^{2} + \\frac{f'''0}{3!}(x-0)^{3} + ...... + \\frac{f^{n}0}{n!}(x-0)^{n} $$ atau dapat ditulis sebagai berikut. \\sum_{i=1}^{n}\\frac{f^{n}(0)}{n!}(x-0)^{n} \\sum_{i=1}^{n}\\frac{f^{n}(0)}{n!}(x-0)^{n}","title":"Deret MacLaurin"},{"location":"tugas1/#implementasi","text":"import math error = 0.001 def percent ( angka ): return str ( round ( angka * 100 , 4 )) + '%' def f ( x ): f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) #\u03a3f(0)x^i / i! print ( 'f ke-' , i , '=' , f_turunan , ' {e^3x=' , current , '} {Ea=' , current - old , '} {|\u03f5a|%=' , ( current - old ) / current , '|' , percent (( current - old ) / current ), '}' ) if current - old < error : iteration = False else : f_turunan *= 3 i += 1 f ( 1 ) Output: f ke - 0 = 1 { e ^ 3 x = 1.0 } { Ea = 1.0 } { | \u03f5 a |%= 1.0 | 100.0 % } f ke - 1 = 3 { e ^ 3 x = 4.0 } { Ea = 3.0 } { | \u03f5 a |%= 0.75 | 75.0 % } f ke - 2 = 9 { e ^ 3 x = 8.5 } { Ea = 4.5 } { | \u03f5 a |%= 0.5294117647058824 | 52.9412 % } f ke - 3 = 27 { e ^ 3 x = 13.0 } { Ea = 4.5 } { | \u03f5 a |%= 0.34615384615384615 | 34.6154 % } f ke - 4 = 81 { e ^ 3 x = 16.375 } { Ea = 3.375 } { | \u03f5 a |%= 0.20610687022900764 | 20.6107 % } f ke - 5 = 243 { e ^ 3 x = 18.4 } { Ea = 2.0249999999999986 } { | \u03f5 a |%= 0.11005434782608689 | 11.0054 % } f ke - 6 = 729 { e ^ 3 x = 19.412499999999998 } { Ea = 1.0124999999999993 } { | \u03f5 a |%= 0.05215711526078554 | 5.2157 % } f ke - 7 = 2187 { e ^ 3 x = 19.846428571428568 } { Ea = 0.4339285714285701 } { | \u03f5 a |%= 0.02186431527802765 | 2.1864 % } f ke - 8 = 6561 { e ^ 3 x = 20.009151785714284 } { Ea = 0.162723214285716 } { | \u03f5 a |%= 0.008132439397150944 | 0.8132 % } f ke - 9 = 19683 { e ^ 3 x = 20.063392857142855 } { Ea = 0.05424107142857082 } { | \u03f5 a |%= 0.0027034844911218605 | 0.2703 % } f ke - 10 = 59049 { e ^ 3 x = 20.079665178571425 } { Ea = 0.016272321428569825 } { | \u03f5 a |%= 0.0008103880858499218 | 0.081 % } f ke - 11 = 177147 { e ^ 3 x = 20.08410308441558 } { Ea = 0.004437905844156376 } { | \u03f5 a |%= 0.00022096609569784593 | 0.0221 % } f ke - 12 = 531441 { e ^ 3 x = 20.08521256087662 } { Ea = 0.001109476461039094 } { | \u03f5 a |%= 5.523847246706314e-05 | 0.0055 % } f ke - 13 = 1594323 { e ^ 3 x = 20.08546859390609 } { Ea = 0.0002560330294691937 } { | \u03f5 a |%= 1.2747177307422833e-05 | 0.0013 % }","title":"Implementasi"},{"location":"tugas2/","text":"Metode Newton Raphson \u00b6 Metode Newton Rapshon merupakan metode pendekatan yang menggunakan satu titik awal x_0 x_0 dan mendekatinya dengan memperhatikan gradien pada titik tersebut. Metode ini dimulai dengan mencari garis singgung kurva pada titik (x_i,f(x_i)) (x_i,f(x_i)) Perpotongan garis singgung dengan sumbu x x yaitu X_{i+1} X_{i+1} , akan menjadi nilai x x yang baru, dengan cara dilakukan berulang-ulang (iterasi). $$ X_{n+1} = x_{n} + \\frac{F(x_{n})}{F^{1}(x_{n})} $$ Persamaan Non Linear \u00b6 Persamaan non-linier dapat diartikan sebagai persamaan yang tidak mengandung syarat seperti persamaan linier, sehingga persamaan non-linier dapat merupakan: Persamaan yang memiliki pangkat selain satu (misal: x_2 x_2 ) Persamaan yang mempunyai produk dua variabel (misal: xyxy xyxy ) Algoritma Metode Newton Raphson \u00b6 Algoritma Metode Newton Raphson adalah sebagai berikut: Definisikan fungsi f(x) f(x) yang akan dicari akarnya. Tentukan harga awal / titik awal ( x0 x0 ). Tentukan toleransi kesalahan ( \u025b \u025b ). Cari turunan fungsi f(x) f(x) . Jika f \u2019(x) f \u2019(x) = 0, maka metode newton raphson tidak dapat dilanjutkan. Hitung nilai fungsi f(x) f(x) dan f \u2019(x) f \u2019(x) dengan menggunakan titik awal. Hitung nilai $ x_{i+1}$ menggunakan rumus: $$ X_{n+1} = x_{n} + \\frac{F(x_{n})}{F^{1}(x_{n})} $$ Hitung kesalahan \\left | x_b - x_0 \\right | \\left | x_b - x_0 \\right | dan bandingkan dengan toleransi kesalahan (\u025b) (\u025b) . Jika \\left | x_b - x_0 \\right | \\leq \\varepsilon \\left | x_b - x_0 \\right | \\leq \\varepsilon , maka dipilih akar persamaan x_{i+1} x_{i+1} . Jika \\left | x_b - x_0 \\right |> \\varepsilon \\left | x_b - x_0 \\right |> \\varepsilon , maka iterasi dilanjutkan. Akar persamaannya adalah x_{i+1} x_{i+1} yang terakhir diperoleh. Implementasi \u00b6 import math e = 2.71828 def fungsi ( x ): x = float (( e ** x ) - ( 4 * x )) return x def fungsiturunan ( x ): x = float (( e ** x ) - ( 4 )) return x x = float ( input ( 'Masukkan nilai awal = ' )) error = float ( input ( 'Masukkan nilai error = ' )) selisih = 1 if fungsi ( x ) == 0 : print ( \"Tidak dilanjutkan karena fungsi(x) = 0\" ) else : iterasi = 0 while selisih > error : iterasi += 1 x1 = x - ( fungsi ( x ) / fungsiturunan ( x )) selisih = math . fabs ( x1 - x ) x = x1 print ( \"Iterasi ke = \" , iterasi , \", x = \" , x1 , \", f(\" , x1 , \") = \" , fungsi ( x1 ), \", selisih = \" , error ) Output : Masukkan nilai awal = 1 Masukkan nilai error = 0.0001 Iterasi ke = 1 , x = 0.0 , f ( 0.0 ) = 1.0 , selisih = 0.0001 Iterasi ke = 2 , x = 0.3333333333333333 , f ( 0.3333333333333333 ) = 0.06227877883196098 , selisih = 0.0001 Iterasi ke = 3 , x = 0.35724635301940616 , f ( 0.35724635301940616 ) = 0.0004022049593612742 , selisih = 0.0001 Iterasi ke = 4 , x = 0.35740281572145605 , f ( 0.35740281572145605 ) = 1.734656973617632e-08 , selisih = 0.0001 Iterasi ke = 5 , x = 0.3574028224700733 , f ( 0.3574028224700733 ) = - 6.439293542825908e-15 , selisih = 0.0001","title":"Newton Raphson"},{"location":"tugas2/#metode-newton-raphson","text":"Metode Newton Rapshon merupakan metode pendekatan yang menggunakan satu titik awal x_0 x_0 dan mendekatinya dengan memperhatikan gradien pada titik tersebut. Metode ini dimulai dengan mencari garis singgung kurva pada titik (x_i,f(x_i)) (x_i,f(x_i)) Perpotongan garis singgung dengan sumbu x x yaitu X_{i+1} X_{i+1} , akan menjadi nilai x x yang baru, dengan cara dilakukan berulang-ulang (iterasi). $$ X_{n+1} = x_{n} + \\frac{F(x_{n})}{F^{1}(x_{n})} $$","title":"Metode Newton Raphson"},{"location":"tugas2/#persamaan-non-linear","text":"Persamaan non-linier dapat diartikan sebagai persamaan yang tidak mengandung syarat seperti persamaan linier, sehingga persamaan non-linier dapat merupakan: Persamaan yang memiliki pangkat selain satu (misal: x_2 x_2 ) Persamaan yang mempunyai produk dua variabel (misal: xyxy xyxy )","title":"Persamaan Non Linear"},{"location":"tugas2/#algoritma-metode-newton-raphson","text":"Algoritma Metode Newton Raphson adalah sebagai berikut: Definisikan fungsi f(x) f(x) yang akan dicari akarnya. Tentukan harga awal / titik awal ( x0 x0 ). Tentukan toleransi kesalahan ( \u025b \u025b ). Cari turunan fungsi f(x) f(x) . Jika f \u2019(x) f \u2019(x) = 0, maka metode newton raphson tidak dapat dilanjutkan. Hitung nilai fungsi f(x) f(x) dan f \u2019(x) f \u2019(x) dengan menggunakan titik awal. Hitung nilai $ x_{i+1}$ menggunakan rumus: $$ X_{n+1} = x_{n} + \\frac{F(x_{n})}{F^{1}(x_{n})} $$ Hitung kesalahan \\left | x_b - x_0 \\right | \\left | x_b - x_0 \\right | dan bandingkan dengan toleransi kesalahan (\u025b) (\u025b) . Jika \\left | x_b - x_0 \\right | \\leq \\varepsilon \\left | x_b - x_0 \\right | \\leq \\varepsilon , maka dipilih akar persamaan x_{i+1} x_{i+1} . Jika \\left | x_b - x_0 \\right |> \\varepsilon \\left | x_b - x_0 \\right |> \\varepsilon , maka iterasi dilanjutkan. Akar persamaannya adalah x_{i+1} x_{i+1} yang terakhir diperoleh.","title":"Algoritma Metode Newton Raphson"},{"location":"tugas2/#implementasi","text":"import math e = 2.71828 def fungsi ( x ): x = float (( e ** x ) - ( 4 * x )) return x def fungsiturunan ( x ): x = float (( e ** x ) - ( 4 )) return x x = float ( input ( 'Masukkan nilai awal = ' )) error = float ( input ( 'Masukkan nilai error = ' )) selisih = 1 if fungsi ( x ) == 0 : print ( \"Tidak dilanjutkan karena fungsi(x) = 0\" ) else : iterasi = 0 while selisih > error : iterasi += 1 x1 = x - ( fungsi ( x ) / fungsiturunan ( x )) selisih = math . fabs ( x1 - x ) x = x1 print ( \"Iterasi ke = \" , iterasi , \", x = \" , x1 , \", f(\" , x1 , \") = \" , fungsi ( x1 ), \", selisih = \" , error ) Output : Masukkan nilai awal = 1 Masukkan nilai error = 0.0001 Iterasi ke = 1 , x = 0.0 , f ( 0.0 ) = 1.0 , selisih = 0.0001 Iterasi ke = 2 , x = 0.3333333333333333 , f ( 0.3333333333333333 ) = 0.06227877883196098 , selisih = 0.0001 Iterasi ke = 3 , x = 0.35724635301940616 , f ( 0.35724635301940616 ) = 0.0004022049593612742 , selisih = 0.0001 Iterasi ke = 4 , x = 0.35740281572145605 , f ( 0.35740281572145605 ) = 1.734656973617632e-08 , selisih = 0.0001 Iterasi ke = 5 , x = 0.3574028224700733 , f ( 0.3574028224700733 ) = - 6.439293542825908e-15 , selisih = 0.0001","title":"Implementasi"}]}